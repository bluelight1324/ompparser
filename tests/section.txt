//For testing purpose, there are several extra empty lines.
//The final version should only contain necessary information.
//This is not a C/C++ code, so there's no required writing style.
//Only two kinds of special lines will be recognized.
  //One is starting with "omp", which is the input.
//The other one is starting with "PASS: ", which is the result for validation.

#pragma omp sections private(a,b,c)
PASS: #pragma omp sections private (a, b, c)

#pragma omp sections firstprivate(a,b,c)
PASS: #pragma omp sections firstprivate (a, b, c)

#pragma omp sections lastprivate(conditional:a,b,c)
PASS: #pragma omp sections lastprivate (conditional: a, b, c)

#pragma omp sections reduction(task,max:a,b,c)
PASS: #pragma omp sections reduction (task, max : a, b, c)

#pragma omp sections nowait
PASS: #pragma omp sections nowait

#pragma omp sections allocate(a,b,c)
PASS: #pragma omp sections allocate (a, b, c)

#pragma omp sections allocate(omp_allocator_handle_t:a,b,c)
PASS: #pragma omp sections allocate (omp_allocator_handle_t: a, b, c)

#pragma omp sections allocate(omp_default_mem_alloc:a,b,c)
PASS: #pragma omp sections allocate (omp_default_mem_alloc: a, b, c)

#pragma omp section
PASS: #pragma omp section 

// invalid test without paired validation.

#pragma omp section lastprivate(userde:a,b,c)

#pragma omp section nowait(dsfasf)









