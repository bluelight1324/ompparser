/*
    For testing purpose, there are several extra empty lines.
    The final version should only contain necessary information.
    This is not a C/C++ code, so there's no required writing style.
    Only two kinds of special lines will be recognized.
    One is starting with "omp", which is the input.
    The other one is starting with "PASS: ", which is the result for validation.

    Maybe we could use Markdown format here.
*/

omp parallel private (a[foo(x, goo(x, y)):100], b[1:30], c)
PASS: omp parallel private (a[foo(x, goo(x, y)):100], b[1:30], c)


omp parallel num_threads (3*5+4/(7+10))
PASS: omp parallel num_threads (3*5+4/(7+10))

omp parallel firstprivate (foo(x), y)
PASS: omp parallel firstprivate (foo(x), y)


omp parallel shared (a, b, c[1:10])

PASS: omp parallel shared (a, b, c[1:10])

omp parallel copyin (a[foo(goo(x)):20],a,y)
PASS: omp parallel copyin (a[foo(goo(x)):20], a, y)

omp parallel default (shared)
PASS: omp parallel default (shared)

omp parallel default (none)
PASS: omp parallel default (none)

omp parallel if (a) if (parallel : b)
PASS: omp parallel if (a) if (parallel: b)

omp parallel proc_bind (master)
PASS: omp parallel proc_bind (master)

omp parallel proc_bind (close)
PASS: omp parallel proc_bind (close)

omp parallel proc_bind (spread)
PASS: omp parallel proc_bind (spread)

omp parallel reduction (inscan, + : a, foo(x)) reduction (abc : x, y, z) reduction (task, user_defined_value : x, y, z) reduction (inscan, max : a, foo(x))
PASS: omp parallel reduction (inscan, + : a, foo(x)) reduction (abc : x, y, z) reduction (task, user_defined_value : x, y, z) reduction (inscan, max : a, foo(x))

omp parallel allocate (omp_high_bw_mem_alloc : m, n[1:5]) allocate (no, allo, cator) allocate (user_defined_test : m, n[1:5])
PASS: omp parallel allocate (omp_high_bw_mem_alloc: m, n[1:5]) allocate (no, allo, cator) allocate (m, n[1:5])
