//For testing purpose, there are several extra empty lines.
//The final version should only contain necessary information.
//This is not a C/C++ code, so there's no required writing style.
//Only two kinds of special lines will be recognized.
  //One is starting with "omp", which is the input.
//The other one is starting with "PASS: ", which is the result for validation.

#pragma omp for private(a,b,c)
PASS: #pragma omp for private (a, b, c)

#pragma omp for firstprivate(a,b,c)
PASS: #pragma omp for firstprivate (a, b, c)

#pragma omp for lastprivate(conditional:a,b,c)
PASS: #pragma omp for lastprivate (conditional: a, b, c)

#pragma omp for linear(a,b,c:2)
PASS: #pragma omp for linear (a, b, c:2)

#pragma omp for linear(val(a,b,c):2)
PASS: #pragma omp for linear (val( a, b, c) :2)

#pragma omp for linear(a)
PASS: #pragma omp for linear (a)

#pragma omp for reduction(task,max:a,b,c)
PASS: #pragma omp for reduction (task, max : a, b, c)

#pragma omp for schedule(monotonic,simd:runtime,2)
PASS: #pragma omp for schedule (monotonic,simd:runtime, 2)

#pragma omp for schedule(runtime,2)
PASS: #pragma omp for schedule (runtime, 2)

#pragma omp for collapse(a)
PASS: #pragma omp for collapse (a)

#pragma omp for ordered(a)
PASS: #pragma omp for ordered (a)

#pragma omp for nowait
PASS: #pragma omp for nowait

#pragma omp for allocate(a,b,c)
PASS: #pragma omp for allocate (a, b, c)

#pragma omp for allocate(omp_allocator_handle_t:a,b,c)
PASS: #pragma omp for allocate (omp_allocator_handle_t: a, b, c)

#pragma omp for allocate(omp_default_mem_alloc:a,b,c)
PASS: #pragma omp for allocate (omp_default_mem_alloc: a, b, c)

#pragma omp for order(concurrent)
PASS: #pragma omp for order (concurrent)

// invalid test without paired validation.

#pragma omp for lastprivate(userde:a,b,c)

#pragma omp for collapse

#pragma omp for nowait(dsfasf)

#pragma omp for order

#pragma omp for schedule(use,user:runtime,2)

#pragma omp for schedule(simd,simd:runtime,2)








